// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.

#include "DataService.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_2;



void
DataService::_cxx_operator::operator>>= (cdrStream &_n) const
{
  _n.marshalString(ID,0);
  _n.marshalString(StudentNumber,0);
  _n.marshalString(Classes,0);
  _n.marshalString(score,0);
  _n.marshalBoolean(isInsert);

}

void
DataService::_cxx_operator::operator<<= (cdrStream &_n)
{
  ID = _n.unmarshalString(0);
  StudentNumber = _n.unmarshalString(0);
  Classes = _n.unmarshalString(0);
  score = _n.unmarshalString(0);
  isInsert = _n.unmarshalBoolean();

}

DataService::DataTransform_ptr DataService::DataTransform_Helper::_nil() {
  return ::DataService::DataTransform::_nil();
}

::CORBA::Boolean DataService::DataTransform_Helper::is_nil(::DataService::DataTransform_ptr p) {
  return ::CORBA::is_nil(p);

}

void DataService::DataTransform_Helper::release(::DataService::DataTransform_ptr p) {
  ::CORBA::release(p);
}

void DataService::DataTransform_Helper::marshalObjRef(::DataService::DataTransform_ptr obj, cdrStream& s) {
  ::DataService::DataTransform::_marshalObjRef(obj, s);
}

DataService::DataTransform_ptr DataService::DataTransform_Helper::unmarshalObjRef(cdrStream& s) {
  return ::DataService::DataTransform::_unmarshalObjRef(s);
}

void DataService::DataTransform_Helper::duplicate(::DataService::DataTransform_ptr obj) {
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
}

DataService::DataTransform_ptr
DataService::DataTransform::_duplicate(::DataService::DataTransform_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
  return obj;
}

DataService::DataTransform_ptr
DataService::DataTransform::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


DataService::DataTransform_ptr
DataService::DataTransform::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

DataService::DataTransform_ptr
DataService::DataTransform::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_DataTransform _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_DataTransform* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _objref_DataTransform;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* DataService::DataTransform::_PD_repoId = "IDL:DataService/DataTransform:1.0";


DataService::_objref_DataTransform::~_objref_DataTransform() {
  
}


DataService::_objref_DataTransform::_objref_DataTransform(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::DataService::DataTransform::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
DataService::_objref_DataTransform::_ptrToObjRef(const char* id)
{
  if (id == ::DataService::DataTransform::_PD_repoId)
    return (::DataService::DataTransform_ptr) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::DataService::DataTransform::_PD_repoId))
    return (::DataService::DataTransform_ptr) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}


//
// Code for DataService::DataTransform::sendData

// Proxy call descriptor class. Mangled signature:
//  _cstring_i_cDataService_moperator
class _0RL_cd_30fece4e65afefac_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_30fece4e65afefac_00000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  DataService::_cxx_operator_var arg_0_;
  const DataService::_cxx_operator* arg_0;
  ::CORBA::String_var result;
};

void _0RL_cd_30fece4e65afefac_00000000::marshalArguments(cdrStream& _n)
{
  (const DataService::_cxx_operator&) *arg_0 >>= _n;

}

void _0RL_cd_30fece4e65afefac_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new DataService::_cxx_operator;
  (DataService::_cxx_operator&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

void _0RL_cd_30fece4e65afefac_00000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalString(result,0);

}

void _0RL_cd_30fece4e65afefac_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalString(0);

}

const char* const _0RL_cd_30fece4e65afefac_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_30fece4e65afefac_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_30fece4e65afefac_00000000* tcd = (_0RL_cd_30fece4e65afefac_00000000*)cd;
  DataService::_impl_DataTransform* impl = (DataService::_impl_DataTransform*) svnt->_ptrToInterface(DataService::DataTransform::_PD_repoId);
  tcd->result = impl->sendData(*tcd->arg_0);


}

char* DataService::_objref_DataTransform::sendData(const ::DataService::_cxx_operator& name)
{
  _0RL_cd_30fece4e65afefac_00000000 _call_desc(_0RL_lcfn_30fece4e65afefac_10000000, "sendData", 9);
  _call_desc.arg_0 = &(::DataService::_cxx_operator&) name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}

DataService::_pof_DataTransform::~_pof_DataTransform() {}


omniObjRef*
DataService::_pof_DataTransform::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::DataService::_objref_DataTransform(ior, id);
}


::CORBA::Boolean
DataService::_pof_DataTransform::is_a(const char* id) const
{
  if (omni::ptrStrMatch(id, ::DataService::DataTransform::_PD_repoId))
    return 1;
  
  return 0;
}

const DataService::_pof_DataTransform _the_pof_DataService_mDataTransform;

DataService::_impl_DataTransform::~_impl_DataTransform() {}


::CORBA::Boolean
DataService::_impl_DataTransform::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if (omni::strMatch(op, "sendData")) {

    _0RL_cd_30fece4e65afefac_00000000 _call_desc(_0RL_lcfn_30fece4e65afefac_10000000, "sendData", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
DataService::_impl_DataTransform::_ptrToInterface(const char* id)
{
  if (id == ::DataService::DataTransform::_PD_repoId)
    return (::DataService::_impl_DataTransform*) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (void*) 1;

  if (omni::strMatch(id, ::DataService::DataTransform::_PD_repoId))
    return (::DataService::_impl_DataTransform*) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (void*) 1;
  return 0;
}

const char*
DataService::_impl_DataTransform::_mostDerivedRepoId()
{
  return ::DataService::DataTransform::_PD_repoId;
}

POA_DataService::DataTransform::~DataTransform() {}

